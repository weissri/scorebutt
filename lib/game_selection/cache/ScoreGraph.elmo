
Elm.ScoreGraph = function(elm){
  var N = Elm.Native, _N = N.Utils(elm), _L = N.List(elm), _E = N.Error(elm), _J = N.JavaScript(elm), _str = _J.toString, $moduleName = 'ScoreGraph';
  var Text = Elm.Text(elm);
  var Text = Elm.Text(elm);
  var Basics = Elm.Basics(elm);
  var Signal = Elm.Signal(elm);
  var List = Elm.List(elm);
  var Maybe = Elm.Maybe(elm);
  var Time = Elm.Time(elm);
  var Prelude = Elm.Prelude(elm);
  var Graphics = Graphics || {};
  Graphics.Element = Elm.Graphics.Element(elm);
  var Color = Elm.Color(elm);
  var Graphics = Graphics || {};
  Graphics.Collage = Elm.Graphics.Collage(elm);
  var Mouse = Elm.Mouse(elm);
  var Graph = Elm.Graph(elm);
  var Window = Elm.Window(elm);
  var _op = {};
  var team4Scores = A2(Signal._op['~'], A2(Signal._op['<~'], F2(function(v0, v1){
    return {ctor:"_Tuple2", _0:v0, _1:v1};}), Signal.constant(Color.purple)), A3(Signal.foldp, F2(function(t, xs){
    return List.take(5000)(_L.Cons({ctor:"_Tuple2", _0:t, _1:((Basics.snd(List.head(xs))+(Basics.cos(t)*6))+0.5)},xs));}), _J.toList([{ctor:"_Tuple2", _0:0, _1:10}]), Time.every((Time.second/10))));
  var team3Scores = A2(Signal._op['~'], A2(Signal._op['<~'], F2(function(v0, v1){
    return {ctor:"_Tuple2", _0:v0, _1:v1};}), Signal.constant(Color.green)), A3(Signal.foldp, F2(function(t, xs){
    return List.take(5000)(_L.Cons({ctor:"_Tuple2", _0:t, _1:((Basics.snd(List.head(xs))+(Basics.sin(t)*6))+0.5)},xs));}), _J.toList([{ctor:"_Tuple2", _0:0, _1:10}]), Time.every((Time.second/10))));
  var team2Scores = A2(Signal._op['~'], A2(Signal._op['<~'], F2(function(v0, v1){
    return {ctor:"_Tuple2", _0:v0, _1:v1};}), Signal.constant(Color.blue)), A3(Signal.foldp, F2(function(arg2, xs){
    return function(){
      switch (arg2.ctor) {
        case '_Tuple2':
          return List.take(5000)(_L.Cons({ctor:"_Tuple2", _0:arg2._0, _1:Basics.toFloat(arg2._1)},xs));
      }_E.Case($moduleName,'on line 16, column 58 to 90')}();}), _J.toList([]), Time.timestamp(A2(Signal.sampleOn, Time.fps(10), Mouse.y))));
  var team1Scores = A2(Signal._op['~'], A2(Signal._op['<~'], F2(function(v0, v1){
    return {ctor:"_Tuple2", _0:v0, _1:v1};}), Signal.constant(A3(Color.rgb, 255, 100, 0))), A3(Signal.foldp, F2(function(arg2, xs){
    return function(){
      switch (arg2.ctor) {
        case '_Tuple2':
          return List.take(5000)(_L.Cons({ctor:"_Tuple2", _0:arg2._0, _1:Basics.toFloat(arg2._1)},xs));
      }_E.Case($moduleName,'on line 12, column 69 to 101')}();}), _J.toList([]), Time.timestamp(A2(Signal.sampleOn, Time.fps(10), Mouse.x))));
  var scoreGraph = A2(Signal._op['~'], A2(Signal._op['~'], A2(Signal._op['<~'], F3(function(xs, wx, wy){
    return A5(Graph.timeline, wx, (wy/2|0), (1/(Basics.toFloat(wx)/30)), (1/2), xs);}), Signal.combine(_J.toList([team1Scores,team2Scores,team3Scores,team4Scores]))), Window.width), Window.height);
  return elm.ScoreGraph = {
    _op : _op, 
    scoreGraph : scoreGraph};};